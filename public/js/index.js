/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./source/js/controls/camera_pan_tilt_zoom.js":
/*!****************************************************!*\
  !*** ./source/js/controls/camera_pan_tilt_zoom.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handlePanTiltZoom: () => (/* binding */ handlePanTiltZoom),\n/* harmony export */   handlePanTiltZoomStop: () => (/* binding */ handlePanTiltZoomStop)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/*\n *\n * Camera Pan/Tilt (stateless)\n * \n */\n\n\n\nfunction handlePanTiltZoom(e) {\n\tvar btn = e.target ;\n\n\t// visual feedback\n\tbtn.classList.add('active');\n\n\t// update backend\n\tconst value = btn.getAttribute('data-value');\n\tconst payload = btn.parentElement.getAttribute('data-path').replace(/<value>/, value);\n\t(0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, null);\n}\n\nfunction handlePanTiltZoomStop(e) {\n\tvar btn = e.target ;\n\n\t// visual feedback\n\tbtn.classList.remove('active');\n\n\t// update backend\n\tconst panCommands = [ '\"left\"', '\"right\"', '\"up\"', '\"down\"' ]; // zoom commands are 'in' and 'out'\n\tconst value = panCommands.includes( btn.getAttribute('data-value') ) ? '\"pan stop\"' : '\"zoom stop\"' ; \n\tconst payload = btn.parentElement.getAttribute('data-path').replace(/<value>/, value);\n\t(0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, null);\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/camera_pan_tilt_zoom.js?");

/***/ }),

/***/ "./source/js/controls/default_button.js":
/*!**********************************************!*\
  !*** ./source/js/controls/default_button.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleDefaultButton: () => (/* binding */ handleDefaultButton)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/*\n *\n * Default button (stateless)\n * \n */\n\n\n\nfunction handleDefaultButton(e) {\n\t// block clicks\n\tvar btn = e.target ;\n\tbtn.removeEventListener( 'click', handleDefaultButton );\n\tbtn.removeEventListener( 'touchstart', handleDefaultButton ) ;\n\t/* NOTE: for the stateless_volume button, you lose the finesse of blocking clicks on the other .volume-stepper button too */\n\n\t// visual feedback\n\tbtn.classList.add('active');\n\n\t// callback\n\tfunction reset() {\n\t\tbtn.classList.remove('active');\n\t\tbtn.addEventListener( 'click', handleDefaultButton );\n\t\tbtn.addEventListener( 'touchstart', handleDefaultButton ) ;\n\t}\n\n\t// update backend\n\tconst value = btn.getAttribute('data-value') ? btn.getAttribute('data-value') : true ;\n\tconst payload = btn.getAttribute('data-path').replace(/<value>/, value);\n\t(0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, reset);\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/default_button.js?");

/***/ }),

/***/ "./source/js/controls/display_source_radio.js":
/*!****************************************************!*\
  !*** ./source/js/controls/display_source_radio.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleDisplaySourceSelect: () => (/* binding */ handleDisplaySourceSelect),\n/* harmony export */   setDisplaySourceOptionState: () => (/* binding */ setDisplaySourceOptionState)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/* harmony import */ var _toggle_button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toggle_button.js */ \"./source/js/controls/toggle_button.js\");\n/* harmony import */ var _power_button_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./power_button.js */ \"./source/js/controls/power_button.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities.js */ \"./source/js/utilities.js\");\n/*\n *\n * Display source radio\n * \n */\n\n\n\n\n\n\nfunction setDisplaySourceOptionState(btn, state) {\n  const container = btn.parentElement;\n  const channel = container.getAttribute('data-channel'); // evaluates falsey if unset\n  const zoomRoom = btn.getAttribute('data-zoom-room-controller') === 'true' ? true : false;\n  const shareScreenModal = btn.getAttribute('data-zoom-share-screen-modal-launcher') === 'true' ? true : false;\n  let powerOverride = false;\n\n  // check for power or pause state override\n  if (channel) {\n    // if linked power == false || linked pause == true, override state\n    if ((document.querySelector(`.power-button[data-channel=${channel}]`) && document.querySelector(`.power-button[data-channel=${channel}]`).getAttribute('data-value') === \"false\")\n      || (document.querySelector(`.pause-button[data-channel=${channel}]`) && document.querySelector(`.pause-button[data-channel=${channel}]`).getAttribute('data-value') === \"true\")) {\n      btn.setAttribute('data-override', 'true');\n      powerOverride = true;\n    }\n    // clear override?\n    else {\n      btn.setAttribute('data-override', 'false');\n    }\n  }\n\n  // Zoom vs Share Screen button disambiguation\n  if (!powerOverride && (zoomRoom || shareScreenModal)) {\n    const otherZoomButton = zoomRoom ? container.querySelector('[data-zoom-share-screen-modal-launcher=true]') : container.querySelector('[data-zoom-room-controller=true]');\n\n    if (btn.getAttribute('data-selected-zoom-input') === 'false') {\n      btn.setAttribute('data-override', 'true');\n    }\n    else if (btn.getAttribute('data-selected-zoom-input') === 'true') {\n      btn.setAttribute('data-override', 'false');\n    }\n    // check for 'uninitiated' state\n    else if (otherZoomButton && otherZoomButton.getAttribute('data-selected-zoom-input') !== 'true') {\n      // in this case, arbitrarily pick the data-zoom-room-controller to be highlighted\n      if (container.querySelector('[data-zoom-room-controller=true]')) {\n        container.querySelector('[data-zoom-room-controller=true]').setAttribute('data-selected-zoom-input', 'true');\n        container.querySelector('[data-zoom-share-screen-modal-launcher=true]').setAttribute('data-selected-zoom-input', 'false');\n\n        if (shareScreenModal) {\n          btn.setAttribute('data-override', 'true');\n        }\n      }\n      // if for some reason there's a Share Screen button but no Zoom button, don't override Share Screen state\n      else {\n        btn.setAttribute('data-selected-zoom-input', 'true');\n        btn.setAttribute('data-override', 'false');\n      }\n    }\n  }\n\n  // finally, set button state\n  (0,_toggle_button_js__WEBPACK_IMPORTED_MODULE_1__.setButtonState)(btn, state, handleDisplaySourceSelect);\n}\n\nfunction handleDisplaySourceSelect(e) {\n  const btn = e.target;\n  const container = btn.parentElement;\n\n  // only switch input if the tapped input is not already selected\n  if (!btn.classList.contains(\"active\")) {\n    let powerActionInitiated = false;\n    let pauseActionInitiated = false;\n\n    // block clicks on all options in the select\n    container.querySelectorAll(\".radio-option\").forEach(function (input) {\n      input.removeEventListener(\"click\", handleDisplaySourceSelect);\n      input.removeEventListener(\"touchstart\", handleDisplaySourceSelect);\n      input.removeAttribute('data-allow-events');\n    });\n\n    // visual feedback\n    if (container.querySelector(\"[data-value=true]\") !== null) {\n      setDisplaySourceOptionState(container.querySelector(\"[data-value=true]\"), false); // clear any previous selection\n    }\n    setDisplaySourceOptionState(btn, true);\n\n    // callback\n    function reset(response) {\n      // set input option states\n      container.querySelectorAll('.radio-option').forEach((input) => {\n        const path = input.getAttribute('data-path');\n        const pathAsObj = JSON.parse(path.replace(/<value>/, '\"\"'));\n        let returnedState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_3__.followPath)(pathAsObj, response);\n        input.setAttribute('data-allow-events', '');\n        setDisplaySourceOptionState(input, returnedState.value);\n      });\n\n      // set video mute state if it was updated\n      if (pauseActionInitiated) {\n        document.querySelectorAll(`.pause-button[data-channel='${channel}']`).forEach((pauseBtn) => {\n          const path = pauseBtn.getAttribute('data-path');\n          const pathAsObj = JSON.parse(path.replace(/<value>/, '\"\"'));\n          let returnedState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_3__.followPath)(pathAsObj, response);\n          pauseBtn.setAttribute('data-allow-events', '');\n          setVideoMuteButtonState(pauseBtn, returnedState.value);\n        })\n      }\n\n      // check if a power up was initiated and needs to be reflected in UI/reset\n      if (powerActionInitiated) {\n        function resetPowerButton(powerBtn, state) {\n          powerBtn.setAttribute('data-allow-events', '');\n          (0,_power_button_js__WEBPACK_IMPORTED_MODULE_2__.setPowerState)(powerBtn, state);\n        }\n\n        // warmup bars for linked power buttons?\n        document.querySelectorAll(`.power-button[data-channel='${channel}']`).forEach((btn) => {\n          // check that power status is true ie. the power up call we just initiated actually worked\n          const powerButtonPathAsObj = JSON.parse(btn.getAttribute('data-path').replace(/<value>/, '\"\"'));\n          const powerState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_3__.followPath)(powerButtonPathAsObj, response);\n          // check if we need a warmup timeout\n          if (powerState.value && btn.getAttribute('data-duration')) { // e.g. if the power up was successful\n            const progressDuration = parseInt(btn.getAttribute('data-duration'));\n            const progress = btn.parentElement.parentElement.querySelector('.progress');\n            (0,_utilities_js__WEBPACK_IMPORTED_MODULE_3__.useProgressBar)(progress, progressDuration, 'warming', function () { resetPowerButton(btn, powerState.value); });\n          }\n          // if update failed or there's no progress bar, reset power button immediately\n          else {\n            resetPowerButton(btn, powerState.value);\n          }\n        });\n      }\n    }\n\n    // update backend\n    const path = btn.getAttribute('data-path');\n    let postData = path.replace(/<value>/, true);\n\n    // check if this should intiate power up on linked power button(s)\t\n    const channel = btn.parentElement.getAttribute('data-channel'); // evaluates falsey if unset\n    if (channel) {\n      document.querySelectorAll(`.power-button[data-channel='${channel}']`).forEach((powerBtn) => {\n        // if the current power state is false, turn on the display\n        if (powerBtn.getAttribute('data-value') === 'false') {\n          const extraData = powerBtn.getAttribute('data-path').replace(/<value>/, true);\n\n          // to do: explicitly make sure power comes before input select\n          let mergedJSON = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_3__.mergeJSON)(JSON.parse(extraData), JSON.parse(postData));\n\n          postData = JSON.stringify(mergedJSON);\n\n          // block power clicks & show visual feedback on the button\n          powerBtn.removeEventListener('click', _power_button_js__WEBPACK_IMPORTED_MODULE_2__.handleTogglePower);\n          powerBtn.removeEventListener('touchstart', _power_button_js__WEBPACK_IMPORTED_MODULE_2__.handleTogglePower);\n          powerBtn.removeAttribute('data-allow-events');\n          (0,_power_button_js__WEBPACK_IMPORTED_MODULE_2__.setPowerState)(powerBtn, true);\n\n          powerActionInitiated = true;\n        }\n      });\n\n      // check if selection should trigger video mute = false on the channel\n      document.querySelectorAll(`.pause-button[data-channel='${channel}']`).forEach((pauseBtn) => {\n        if (pauseBtn.getAttribute('data-value') === 'true') {\n          const extraData = pauseBtn.getAttribute('data-path').replace(/<value>/, false);\n          let mergedJSON = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_3__.mergeJSON)(JSON.parse(postData), JSON.parse(extraData));\n          postData = JSON.stringify(mergedJSON);\n\n          // block pause clicks & show visual feedback:\n          pauseBtn.removeEventListener('click', handleVideoMute);\n          pauseBtn.removeEventListener('touchstart', handleVideoMute);\n          pauseBtn.removeAttribute('data-allow-events');\n          setVideoMuteButtonState(pauseBtn, false);\n\n          pauseActionInitiated = true;\n        }\n      });\n    }\n\n    (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(postData, reset);\n  }\n\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/display_source_radio.js?");

/***/ }),

/***/ "./source/js/controls/mute_button.js":
/*!*******************************************!*\
  !*** ./source/js/controls/mute_button.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleMuteButton: () => (/* binding */ handleMuteButton),\n/* harmony export */   setMuteButtonState: () => (/* binding */ setMuteButtonState)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/* harmony import */ var _volume_slider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./volume_slider.js */ \"./source/js/controls/volume_slider.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"./source/js/utilities.js\");\n/*\n *\n * Audio Mute button\n * \n */\n\n\n\n\nfunction setMuteButtonState( btn, state ) {\n\t// everything is topsy turvy in mute land ...\n\t// when muted, the button should be grey, with the slash showing\n\tif ( state === true ) {\n\t\tbtn.classList.remove('active');\n\t\tbtn.querySelector( \".slash\" ).classList.remove( \"hidden\" );\n\t}\n\t// when not muted, color the button and remove the slash\n\telse {\n\t\tbtn.classList.add('active');\n\t\tbtn.querySelector( \".slash\" ).classList.add( \"hidden\" );\n\t}\n\n\t// data-* attributes\n\tbtn.setAttribute( 'data-value', state );\n\n\t// handlers\n\tif ( btn.hasAttribute('data-allow-events') ) {\n\t\tbtn.addEventListener( 'click', handleMuteButton );\n\t\tbtn.addEventListener( 'touchstart', handleMuteButton ) ;\n\t}\n\n\t// look for linked volume sliders and tell them to update their state\n\tif ( btn.getAttribute('data-channel') ) {\n\t\tdocument.querySelectorAll( `.slider[data-channel='${btn.getAttribute('data-channel')}']` ).forEach((slider) => {\n\t\t\tslider.setAttribute( 'data-muted', state ) ;\n\t\t\t(0,_volume_slider_js__WEBPACK_IMPORTED_MODULE_1__.setVolumeSliderState)( slider, slider.value );\n\t\t});\n\t}\n}\n\nfunction handleMuteButton(e) {\n\t// block clicks\n\tvar btn = e.target ;\n\tbtn.removeEventListener( 'click', handleMuteButton );\n\tbtn.removeEventListener( 'touchstart', handleMuteButton ) ;\n\tbtn.removeAttribute( 'data-allow-events' );\n\n\t// visual feedback\n\tconst newValue = btn.getAttribute( 'data-value' ) === 'true' ? false : true ;\n\tsetMuteButtonState( btn, newValue );\n\n\t// callback\n\tfunction reset(response) {\n\t\tconst pathAsObj = JSON.parse( path.replace( /<value>/, '\"\"' ) ); \n\t\tlet returnedState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.followPath)( pathAsObj, response );\n\t\tbtn.setAttribute( 'data-allow-events', '' );\n\t\tsetMuteButtonState( btn, returnedState.value );\n\t}\n\t\n\t// update backend\n\tconst path = btn.getAttribute('data-path') ;\n\tconst payload = path.replace( /<value>/, newValue );\n\n\t(0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, reset);\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/mute_button.js?");

/***/ }),

/***/ "./source/js/controls/power_button.js":
/*!********************************************!*\
  !*** ./source/js/controls/power_button.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   countdownTimeoutId: () => (/* reexport safe */ _utilities_js__WEBPACK_IMPORTED_MODULE_4__.countdownTimeoutId),\n/* harmony export */   handleTogglePower: () => (/* binding */ handleTogglePower),\n/* harmony export */   setPowerState: () => (/* binding */ setPowerState)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/* harmony import */ var _toggle_button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toggle_button.js */ \"./source/js/controls/toggle_button.js\");\n/* harmony import */ var _video_mute_button_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./video_mute_button.js */ \"./source/js/controls/video_mute_button.js\");\n/* harmony import */ var _display_source_radio_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./display_source_radio.js */ \"./source/js/controls/display_source_radio.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities.js */ \"./source/js/utilities.js\");\n/*\n *\n * Power\n * \n */\n\n\n\n\n\n\n\nconst shutdownWarningTime = 60; // seconds\n\nfunction setPowerState(powerBtn, state) {\n  (0,_toggle_button_js__WEBPACK_IMPORTED_MODULE_1__.setButtonState)(powerBtn, state, handleTogglePower);\n\n  // update dependent buttons\n  const channel = powerBtn.getAttribute('data-channel');\n\n  // toggle visibility of linked video mute\n  if (channel) {\n    document.querySelectorAll(`.pause-button[data-channel='${channel}']`).forEach((pauseBtn) => {\n      if (state === true) {\n        pauseBtn.classList.remove('invisible');\n      }\n      else {\n        pauseBtn.classList.add('invisible');\n      }\n    });\n  }\n\n  // ask linkedInputs to re-evaluate themselves\n  if (channel) {\n    document.querySelectorAll(`.display-source-radio[data-channel='${channel}'] .radio-option`).forEach((input) => {\n      const currentState = input.getAttribute('data-value') === 'true' ? true : false;\n      (0,_display_source_radio_js__WEBPACK_IMPORTED_MODULE_3__.setDisplaySourceOptionState)(input, currentState);\n    });\n  }\n}\n\n\nfunction handleTogglePower(e) {\n  const btn = e.target;\n  const currentState = btn.getAttribute('data-value');\n  const newState = currentState === 'true' ? false : true;\n  const path = btn.getAttribute('data-path');\n  let postData = path.replace(/<value>/, newState);\n  const channel = btn.getAttribute('data-channel') ? btn.getAttribute('data-channel') : false;\n  const linkedInputs = channel ? document.querySelectorAll(`.display-source-radio[data-channel='${channel}'] .radio-option`) : false;\n\n  const confirmation = document.getElementById(\"shutdown-confirmation\");\n  let shutdownTimeoutId;\n\n  // Note, because some touches on this button only launch a modal, listeners are \n  // removed only when a power action is actually taken (in sendPowerUpdate)\n\n  // callbacks\n  function cleanupConfirmationModal() {\n    // prevent default shutdown\n    clearTimeout(shutdownTimeoutId);\n    clearTimeout(_utilities_js__WEBPACK_IMPORTED_MODULE_4__.countdownTimeoutId);\n\n    // hide the modal\n    confirmation.classList.add('hidden');\n\n    // remove button listeners\n    confirmation.querySelector(\"button[name=shutdown]\").removeEventListener(\"click\", sendPowerUpdate);\n    confirmation.querySelector(\"button[name=shutdown]\").removeEventListener(\"touchstart\", sendPowerUpdate);\n    confirmation.querySelector(\"button[name=cancel]\").removeEventListener(\"click\", cleanupConfirmationModal);\n    confirmation.querySelector(\"button[name=cancel]\").removeEventListener(\"touchstart\", cleanupConfirmationModal);\n  }\n\n  function reset(response) {\n    clearTimeout(shutdownTimeoutId);\n    clearTimeout(_utilities_js__WEBPACK_IMPORTED_MODULE_4__.countdownTimeoutId);\n    const pathAsObj = JSON.parse(path.replace(/<value>/, '\"\"'));\n    const returnedState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.followPath)(pathAsObj, response);\n\n    // check for timeout before re-allowing events\n    const progressDuration = btn.getAttribute('data-duration') ? parseInt(btn.getAttribute('data-duration')) : false;\n    if (progressDuration && returnedState.value === newState) {\n      // allow input select during warm up\n      if (returnedState.value === true && channel) {\n        linkedInputs.forEach((input) => {\n          input.setAttribute('data-allow-events', '');\n        });\n      }\n\n      // warmup/cooldown bar\n      const progress = btn.parentElement.parentElement.querySelector('.progress');\n      const progressClass = newState === true ? 'warming' : 'cooling';\n      (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.useProgressBar)(progress, progressDuration, progressClass, function () {\n        // reattach power events\n        btn.setAttribute('data-allow-events', '');\n        btn.addEventListener('click', handleTogglePower);\n        btn.addEventListener('touchstart', handleTogglePower);\n\n        // reattach input events (redundant but harmless in the case of power on) \n        if (channel) {\n          linkedInputs.forEach((input) => {\n            input.setAttribute('data-allow-events', '');\n            input.addEventListener('click', _display_source_radio_js__WEBPACK_IMPORTED_MODULE_3__.handleDisplaySourceSelect);\n            input.addEventListener('touchstart', _display_source_radio_js__WEBPACK_IMPORTED_MODULE_3__.handleDisplaySourceSelect);\n          });\n        }\n      });\n    }\n    // no progress bar (or update failed)\n    else {\n      // allow power and linked input events (get reattached in state setter below)\n      btn.setAttribute('data-allow-events', '');\n\n      if (channel) {\n        linkedInputs.forEach((input) => {\n          input.setAttribute('data-allow-events', '');\n        });\n      }\n    }\n\n    // visual feedback on response: power\n    setPowerState(btn, returnedState.value);\n\n    if (channel) {\n      // visual feedback on response: linked inputs\n      linkedInputs.forEach((input) => {\n        const inputPathAsObj = JSON.parse(input.getAttribute('data-path').replace(/<value>/, true));\n        let inputState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.followPath)(inputPathAsObj, response).value;\n        (0,_display_source_radio_js__WEBPACK_IMPORTED_MODULE_3__.setDisplaySourceOptionState)(input, inputState);\n      });\n\n      // visual feedback on response: linked pause\n      document.querySelectorAll(`.pause-button[data-channel='${channel}']`).forEach((pauseBtn) => {\n        const pauseButtonPathAsObj = JSON.parse(pauseBtn.getAttribute('data-path').replace(/<value>/, true));\n        const pauseButtonState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.followPath)(pauseButtonPathAsObj, response);\n        pauseBtn.setAttribute('data-allow-events', ''); // safe to allow pause in any scenario\n        (0,_video_mute_button_js__WEBPACK_IMPORTED_MODULE_2__.setVideoMuteButtonState)(pauseBtn, pauseButtonState);\n      });\n    }\n\n    // hide confirmation if it isn't already\n    cleanupConfirmationModal();\n  }\n\n  /* send update */\n  function sendPowerUpdate() {\n    // block clicks on power button\n    btn.removeEventListener('click', handleTogglePower);\n    btn.removeEventListener('touchstart', handleTogglePower);\n    btn.removeAttribute('data-allow-events');\n\n    // block clicks on linked pause and input buttons\n    if (channel) {\n      document.querySelectorAll(`.pause-button[data-channel='${channel}']`).forEach((pauseBtn) => {\n        pauseBtn.removeEventListener('click', _video_mute_button_js__WEBPACK_IMPORTED_MODULE_2__.handleVideoMute);\n        pauseBtn.removeEventListener('touchstart', _video_mute_button_js__WEBPACK_IMPORTED_MODULE_2__.handleVideoMute);\n        pauseBtn.removeAttribute('data-allow-events');\n      });\n\n      linkedInputs.forEach((input) => {\n        input.removeEventListener('click', _display_source_radio_js__WEBPACK_IMPORTED_MODULE_3__.handleDisplaySourceSelect);\n        input.removeEventListener('touchstart', _display_source_radio_js__WEBPACK_IMPORTED_MODULE_3__.handleDisplaySourceSelect);\n        input.removeAttribute('data-allow-events');\n      });\n    }\n\n    // block clicks on shutdown confirmation button\n    confirmation.querySelector(\"button[name=shutdown]\").removeEventListener(\"click\", sendPowerUpdate);\n    confirmation.querySelector(\"button[name=shutdown]\").removeEventListener(\"touchstart\", sendPowerUpdate);\n\n    // immediate visual feedback\n    btn.classList.toggle('active');\n\n    (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(postData, reset)\n  }\n\n  // power on\n  if (newState === true) {\n    // if linked channel(s) exists, select one of its inputs in update_status\n    if (channel) {\n      document.querySelectorAll(`.display-source-radio[data-channel='${channel}']`).forEach((radio) => {\n        let defaultInput = radio.getAttribute('data-default-option');\n\n        // check for special value 'last_selected'. Note: Some displays/switchers do not maintain input state \n        // while power is off, so this feature is not universaly supported\n        if (defaultInput === \"last_selected\") {\n          defaultInput = radio.querySelector('[data-value=true]') ? radio.querySelector('[data-value=true]').getAttribute('data-option') : false;\n        }\n\n        // no default input found, default to first .radio-option\n        if (!defaultInput || !radio.querySelector(`[data-option=${defaultInput}]`)) {\n          defaultInput = radio.querySelector('.radio-option').getAttribute('data-option');\n        }\n\n        const extraData = radio.querySelector(`[data-option=${defaultInput}]`).getAttribute('data-path').replace(/<value>/, true);\n        let mergedJSON = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.mergeJSON)(JSON.parse(postData), JSON.parse(extraData));\n        postData = JSON.stringify(mergedJSON);\n      });\n    }\n\n    sendPowerUpdate();\n  }\n  // shutdown\n  else {\n    // set the confirmation screen projector counter and name\n    confirmation.querySelector(\".counter\").innerHTML = shutdownWarningTime;\n    (0,_utilities_js__WEBPACK_IMPORTED_MODULE_4__.countdown)(confirmation.querySelector(\".counter\"));\n    confirmation.querySelector(\".projector-name\").textContent = btn.getAttribute(\"data-channel-name\");\n\n    // attach event listeners to confirm and cancel buttons\n    confirmation.querySelector(\"button[name=shutdown]\").addEventListener(\"click\", sendPowerUpdate);\n    confirmation.querySelector(\"button[name=shutdown]\").addEventListener(\"touchstart\", sendPowerUpdate);\n    confirmation.querySelector(\"button[name=cancel]\").addEventListener(\"click\", cleanupConfirmationModal);\n    confirmation.querySelector(\"button[name=cancel]\").addEventListener(\"touchstart\", cleanupConfirmationModal);\n\n    // reveal the modal\n    confirmation.classList.remove('hidden');\n\n    // Default action: shutdown after 60 seconds\n    var duration = (shutdownWarningTime * 1000) + 100;  // shutdownWarningTime is global, set in window.onload\n    shutdownTimeoutId = setTimeout(sendPowerUpdate, duration);\n  }\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/power_button.js?");

/***/ }),

/***/ "./source/js/controls/radio.js":
/*!*************************************!*\
  !*** ./source/js/controls/radio.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleRadioSelect: () => (/* binding */ handleRadioSelect)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/* harmony import */ var _toggle_button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toggle_button.js */ \"./source/js/controls/toggle_button.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"./source/js/utilities.js\");\n/*\n *\n * Radio button group (generic; display_sourece_radio and \n * camera_preset_radio are also base on this type)\n * \n */\n\n\n\n\n\nfunction handleRadioSelect(e) {\n    const btn = e.target ;\n    const container = btn.parentElement;\n\n    // callback\n    function reset( response ) {\n        container.querySelectorAll( '.radio-option' ).forEach((option) => {\n            const path = option.getAttribute('data-path'); \n            const pathAsObj = JSON.parse( path.replace( /<value>/, '\"\"' ) ); \n            let returnedState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.followPath)( pathAsObj, response ) ;\n            option.setAttribute( 'data-allow-events', '' );\n            (0,_toggle_button_js__WEBPACK_IMPORTED_MODULE_1__.setButtonState)( option, returnedState.value, handleRadioSelect );\n        });\t\n    }\n\n    // only switch selection if the tapped option is not already selected\n\tif ( !btn.classList.contains(\"active\") ) { \n        // block clicks on all options in the select\n\t\tcontainer.querySelectorAll( \".radio-option\" ).forEach( function( option ) {\n\t\t\toption.removeEventListener( \"click\",  handleRadioSelect );\n\t\t\toption.removeEventListener( \"touchstart\", handleRadioSelect );\n\t\t\toption.removeAttribute( 'data-allow-events' );\n\t\t});\n\n\t\t// visual feedback\n\t\tif ( container.querySelector( \"[data-value=true]\" ) !== null ) {\n\t\t\t(0,_toggle_button_js__WEBPACK_IMPORTED_MODULE_1__.setButtonState)( container.querySelector( \"[data-value=true]\" ), false, handleRadioSelect ); // clear any previous selection\n\t\t}\n\t\t(0,_toggle_button_js__WEBPACK_IMPORTED_MODULE_1__.setButtonState)( btn, true, handleRadioSelect );\n\n        // update backend\n\t\tconst path = btn.getAttribute('data-path') ;\n\t\tconst payload = path.replace( /<value>/, true );\n        (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, reset);\n    } \n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/radio.js?");

/***/ }),

/***/ "./source/js/controls/toggle_button.js":
/*!*********************************************!*\
  !*** ./source/js/controls/toggle_button.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleToggleButton: () => (/* binding */ handleToggleButton),\n/* harmony export */   setButtonState: () => (/* binding */ setButtonState)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities.js */ \"./source/js/utilities.js\");\n/*\n *\n * Toggle button (stateful)\n * \n */\n\n\n\nfunction setButtonState( btn, state, handler ) {\n\tif ( state === true && btn.getAttribute( 'data-override') !== 'true' ) {\n\t\tbtn.classList.add('active');\n\t}\n\telse {\n\t\tbtn.classList.remove('active');\n\t}\n\n\t// data-* attributes\n\tbtn.setAttribute( 'data-value', state );\n\n\t// handlers\n\tif ( btn.hasAttribute('data-allow-events') ) {\n\t\tbtn.addEventListener( 'click', handler );\n\t\tbtn.addEventListener( 'touchstart', handler ) ;\n\t}\t\n}\n\nfunction handleToggleButton(e) {\n\t// block clicks\n\tvar btn = e.target ;\n\tbtn.removeEventListener( 'click', handleToggleButton );\n\tbtn.removeEventListener( 'touchstart', handleToggleButton ) ;\n\tbtn.removeAttribute( 'data-allow-events' );\n\n\t// visual feedback\n\tconst newState = btn.getAttribute('data-value') === 'true' ? false : true ;\n\tsetButtonState( btn, newState, handleToggleButton );\n\n\t// callback\n\tfunction reset(response) {\n\t\tconst pathAsObj = JSON.parse( path.replace( /<value>/, '\"\"' ) ); \n\t\tlet returnedState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_1__.followPath)( pathAsObj, response );\n\t\tbtn.setAttribute( 'data-allow-events', '' );\n\t\tsetButtonState( btn, returnedState.value, handleToggleButton );\n\t}\n\n\t// update backend\n\tconst path = btn.getAttribute('data-path') ;\n\tconst payload = path.replace( /<value>/, newState );\n\t(0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, reset);\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/toggle_button.js?");

/***/ }),

/***/ "./source/js/controls/video_mute_button.js":
/*!*************************************************!*\
  !*** ./source/js/controls/video_mute_button.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleVideoMute: () => (/* binding */ handleVideoMute),\n/* harmony export */   setVideoMuteButtonState: () => (/* binding */ setVideoMuteButtonState)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/* harmony import */ var _display_source_radio_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./display_source_radio.js */ \"./source/js/controls/display_source_radio.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities.js */ \"./source/js/utilities.js\");\n/*\n *\n * Video mute (pause)\n * \n */\n\n\n\n\n\nfunction setVideoMuteButtonState( btn, state ) {\n\t// when video is muted, color the button, show the slash, and change text to \n\tif ( state === true ) {\n\t\tbtn.classList.add('active');\n\t\tbtn.querySelector( \".slash\" ).classList.remove( \"hidden\" );\n\t\tbtn.querySelector(\".button-label\").innerHTML = \"Show video\" ;\n\t}\n\telse {\n\t\tbtn.classList.remove('active');\n\t\tbtn.querySelector( \".slash\" ).classList.add( \"hidden\" );\n\t\tbtn.querySelector(\".button-label\").innerHTML = \"Hide video\" ;\n\t}\n\n\t// data-* attributes\n\tbtn.setAttribute( 'data-value', state );\n\n\t// handlers\n\tif ( btn.hasAttribute('data-allow-events') ) {\n\t\tbtn.addEventListener( 'click', handleVideoMute );\n\t\tbtn.addEventListener( 'touchstart', handleVideoMute ) ;\n\t}\n\n\t// ask linkedInputs to re-evaluate themselves\n\tconst channel = btn.getAttribute( 'data-channel' );\n\tif ( channel ) {\n\t\tdocument.querySelectorAll( `.display-source-radio[data-channel='${channel}'] .radio-option` ).forEach((input) => {\n\t\t\tconst currentState = input.getAttribute( 'data-value' ) === 'true' ? true : false ;\n\t\t\t(0,_display_source_radio_js__WEBPACK_IMPORTED_MODULE_1__.setDisplaySourceOptionState)( input, currentState );\n\t\t});\n\t}\n}\n\nfunction handleVideoMute(e) {\n\tconst btn = e.target;\n\tconst newState = btn.getAttribute('data-value') === 'true' ? false : true ;\n\tconst path = btn.getAttribute('data-path') ;\n\tconst payload = path.replace( /<value>/, newState );\n\n\t// block clicks\n\tbtn.removeEventListener( 'click', handleVideoMute );\n\tbtn.removeEventListener( 'touchstart', handleVideoMute );\n\tbtn.removeAttribute( 'data-allow-events' );\n\n\t// visual feedback\n\tsetVideoMuteButtonState( btn, newState );\n\n\t// callback\n\tfunction reset(response) {\n\t\tconst pathAsObj = JSON.parse( path.replace( /<value>/, '\"\"' ) ); \n\t\tconst returnedState = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.followPath)( pathAsObj, response );\n\t\tbtn.setAttribute( 'data-allow-events', '' );\n\t\tsetVideoMuteButtonState( btn, returnedState.value );\n\t}\n\n\t// update backend\n\t(0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, reset);\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/video_mute_button.js?");

/***/ }),

/***/ "./source/js/controls/volume_slider.js":
/*!*********************************************!*\
  !*** ./source/js/controls/volume_slider.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleVolumeOngoing: () => (/* binding */ handleVolumeOngoing),\n/* harmony export */   handleVolumeSlider: () => (/* binding */ handleVolumeSlider),\n/* harmony export */   setVolumeSliderState: () => (/* binding */ setVolumeSliderState)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main.js */ \"./source/js/main.js\");\n/*\n *\n * Volume slider\n * \n */\n\n\n\nfunction setVolumeSliderState(slider, level) {\n  const color = slider.getAttribute('data-muted') === \"true\" ? 'var(--slider-muted)' : 'var(--theme-color)';\n  level = level && parseInt(level) ? level : 0 ; // parse error values as 0\n  slider.value = level ; \n  slider.setAttribute('style', `background:linear-gradient(to right, ${color}, ${color} ${level}%, var(--slider-muted) ${level}%, var(--slider-muted))`);\n\n  // handlers\n  if (slider.hasAttribute('data-allow-events')) {\n    slider.addEventListener('input', handleVolumeSlider);\n  }\n}\n\nvar handleVolumeOngoing = false ;\nfunction handleVolumeSlider(e, isRecursion=false) {\n\tconst slider = e.target ;\n\n\t//clear timeouts\n\twindow.clearTimeout(_main_js__WEBPACK_IMPORTED_MODULE_0__.refresh);\n\tconst timerId = parseInt( slider.getAttribute( 'data-timer' ) );\n\twindow.clearTimeout( _main_js__WEBPACK_IMPORTED_MODULE_0__.availableTimers[timerId] );\n\n\tif( !isRecursion ) {\n\t\t// visual feedback\n\t\tsetVolumeSliderState( slider, slider.value );\n\t}\n\n\tif( handleVolumeOngoing===false ) {\n\t\thandleVolumeOngoing = true ;\n\t\tconst path = slider.getAttribute('data-path') ;\n\t\tconst payload = path.replace( /<value>/, slider.value );\n\t\t(0,_main_js__WEBPACK_IMPORTED_MODULE_0__.updateStatus)(payload, function() {\n\t\t\thandleVolumeOngoing = false ;\n\t\t} );\n\t} else {\n\t\t_main_js__WEBPACK_IMPORTED_MODULE_0__.availableTimers[timerId] = setTimeout( function() { handleVolumeSlider(e, true) ; }, 200 ) ;\n\t}\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/controls/volume_slider.js?");

/***/ }),

/***/ "./source/js/main.js":
/*!***************************!*\
  !*** ./source/js/main.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   availableTimers: () => (/* binding */ availableTimers),\n/* harmony export */   orchestrator: () => (/* binding */ orchestrator),\n/* harmony export */   refresh: () => (/* binding */ refresh),\n/* harmony export */   setupControlSet: () => (/* binding */ setupControlSet),\n/* harmony export */   system: () => (/* binding */ system),\n/* harmony export */   updateStatus: () => (/* binding */ updateStatus)\n/* harmony export */ });\n/* harmony import */ var _modals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals.js */ \"./source/js/modals.js\");\n/* harmony import */ var _maintenance_modal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maintenance_modal.js */ \"./source/js/maintenance_modal.js\");\n/* harmony import */ var _utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities.js */ \"./source/js/utilities.js\");\n/* harmony import */ var _controls_camera_pan_tilt_zoom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controls/camera_pan_tilt_zoom.js */ \"./source/js/controls/camera_pan_tilt_zoom.js\");\n/* harmony import */ var _controls_default_button_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./controls/default_button.js */ \"./source/js/controls/default_button.js\");\n/* harmony import */ var _controls_display_source_radio_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controls/display_source_radio.js */ \"./source/js/controls/display_source_radio.js\");\n/* harmony import */ var _controls_mute_button_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controls/mute_button.js */ \"./source/js/controls/mute_button.js\");\n/* harmony import */ var _controls_power_button_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./controls/power_button.js */ \"./source/js/controls/power_button.js\");\n/* harmony import */ var _controls_radio_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./controls/radio.js */ \"./source/js/controls/radio.js\");\n/* harmony import */ var _controls_toggle_button_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./controls/toggle_button.js */ \"./source/js/controls/toggle_button.js\");\n/* harmony import */ var _controls_video_mute_button_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./controls/video_mute_button.js */ \"./source/js/controls/video_mute_button.js\");\n/* harmony import */ var _controls_volume_slider_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./controls/volume_slider.js */ \"./source/js/controls/volume_slider.js\");\n// Import all required modules\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet orchestrator, system, refresh;\nlet updateStatusOngoing = false;\nlet retries = 2;\n\n// pool of 10 volume slider timeout IDs (10 is an arbitrary upper limit on sliders per system)\nlet timer1, timer2, timer3, timer4, timer5, timer6, timer7, timer8, timer9, timer10;\nconst availableTimers = [timer1, timer2, timer3, timer4, timer5, timer6, timer7, timer8, timer9, timer10];\nlet nextAvailableTimer = 0;\n\n\nfunction clearDisplay() {\n  // clear main controls\n  document.getElementById('main-controls').innerHTML = \"\";\n\n  // clear custom modals\n  document.getElementById('advanced-modals-container').innerHTML = \"\";\n\n  // clear headers\n  document.getElementById(\"room-name\").innerHTML = \"\";\n  document.getElementById(\"room-header\").classList.add(\"hidden\");\n}\n\n/***\n * \n *  \n * Control set creation and update\n *    \n *                                                    \n */\n// Create base html for each control defined and inject into DOM\n// options -- { callback, half-width }\nfunction setupControlSet(controlSetId, data, path, containerId, options = { 'half_width': false, 'justify_content': false }) {\n  let icon = document.getElementById(`${data.icon}-icon-template`) ? document.getElementById(`${data.icon}-icon-template`).innerHTML : \"\";\n  let noiconClass = icon === \"\" ? \"no-icon\" : \"\";\n  const controlSetName = data.hasOwnProperty('name') ? data.name : controlSetId;\n  let controlSetBlob = document.getElementById('generic-control-set-template').innerHTML\n    .replace(/{{icon}}/g, icon)\n    .replace(/{{no-icon}}/g, noiconClass)\n    .replace(/{{id}}/g, controlSetId)\n    .replace(/{{control_set_name}}/g, controlSetName);\n\n  // insert control set into DOM\n  const container = document.getElementById(containerId);\n  container.insertAdjacentHTML('beforeend', controlSetBlob);\n\n  const controlSet = container.lastElementChild;\n\n  // add optional styling classes\n  if (options.half_width) { controlSet.classList.add('half-width') }\n  if (options.justify_content) { controlSet.classList.add('justify-content') }\n\n  // loop through data.controls and create button in the DOM for each, based on type\n  for (const control in data.controls) {\n    const type = data.controls[control]?.type;\n    if (!type) { console.error(\"No type specified for \" + control) }\n\n    const pathAttr = path.replace(/<id>/g, control);\n    const channel = data.controls[control].hasOwnProperty('channel') ? data.controls[control].channel : \"\";\n\n    // generate html based on button type\n    let htmlBlob;\n    if (type === \"stateless_mute\") {\n      htmlBlob = document.getElementById('mute-button-template').innerHTML\n        .replace(/{{path}}/g, pathAttr)\n        .replace(/{{control_set}}/g, controlSetName)\n        .replace(/{{muteState}}/g, \"\");\n    }\n    if (type === \"stateless_volume\") {\n      htmlBlob = document.getElementById('stateless-volume-control-template').innerHTML\n        .replace(/{{path}}/g, pathAttr)\n        .replace(/{{control_set}}/g, controlSetName);\n    }\n    if (type === \"generic_toggle\") {\n      icon = document.getElementById(`${data.controls[control].icon}-icon-template`) ? document.getElementById(`${data.controls[control].icon}-icon-template`).innerHTML : \"\";\n      noiconClass = icon === \"\" ? \"no-icon\" : \"\";\n      htmlBlob = document.getElementById('generic-button-template').innerHTML\n        .replace(/{{path}}/g, pathAttr)\n        .replace(/{{name}}/g, data.controls[control].name)\n        .replace(/{{icon}}/g, icon)\n        .replace(/{{no-icon}}/g, noiconClass)\n        .replace(/{{enabled}}/g, data.controls[control].value);\n    }\n    if (type === \"mute\") {\n      htmlBlob = document.getElementById('mute-button-template').innerHTML\n        .replace(/{{control_set}}/g, controlSetName)\n        .replace(/{{path}}/g, pathAttr)\n        .replace(/{{channel}}/g, channel)\n        .replace(/{{muteState}}/g, data.controls[control].value);\n    }\n    if (type === \"volume\") {\n      htmlBlob = document.getElementById('volume-control-template').innerHTML\n        .replace(/{{control_set}}/g, controlSetName)\n        .replace(/{{path}}/g, pathAttr)\n        .replace(/{{channel}}/g, channel)\n        .replace(/{{timerId}}/g, nextAvailableTimer);\n      nextAvailableTimer++;\n    }\n    if (type === \"power\") {\n      const name = data.controls[control].hasOwnProperty('name') ? data.controls[control].name : \"Power\";\n      const channelName = data.controls[control].hasOwnProperty('channel_name') ? data.controls[control].channel_name : \"\";\n      const progressDuration = data.controls[control].hasOwnProperty('warmup_timer') ? data.controls[control].warmup_timer : false; // extra config for warmup/cool down progess bars\n      htmlBlob = document.getElementById('power-button-template').innerHTML\n        .replace(/{{path}}/g, pathAttr)\n        .replace(/{{channel}}/g, channel)\n        .replace(/{{name}}/g, name)\n        .replace(/{{channel_name}}/g, channelName)\n        .replace(/{{control_set}}/g, controlSetName)\n        .replace(/{{duration}}/g, progressDuration)\n        .replace(/{{value}}/g, data.controls[control].value);\n    }\n    if (type === \"video_mute\") {\n      htmlBlob = document.getElementById('video-pause-template').innerHTML\n        .replace(/{{path}}/g, pathAttr)\n        .replace(/{{channel}}/g, channel)\n        .replace(/{{control_set}}/g, controlSetName)\n        .replace(/{{value}}/g, data.controls[control].value);\n    }\n    if (type === \"radio\" || type === \"camera_preset_radio\" || type === \"display_source_radio\" || type === \"input_select\") {\n      // container \n      let defaultOption = data.controls[control].hasOwnProperty('default_option') ? data.controls[control].default_option : \"\";\n      if (data.controls[control].hasOwnProperty('default_input')) { // check for deprecated 'default_input' prop, for backwards compatibility\n        defaultOption = data.controls[control].default_input;\n      }\n\n      let typeSpecificClass = type === \"camera_preset_radio\" ? 'camera-preset-radio' : '';\n      if (type === \"display_source_radio\" || type === \"input_select\") {\n        typeSpecificClass = 'display-source-radio';\n      }\n      const radioContainerTemplate = document.getElementById('radio-control-template').innerHTML\n        .replace(/{{path}}/g, pathAttr.replace(/\\\"value\\\"/, '\"options\"'))\n        .replace(/{{channel}}/g, channel)\n        .replace(/{{defaultOption}}/g, defaultOption)\n        .replace(/{{class}}/g, typeSpecificClass);\n\n      // options\n      const optionTemplate = document.getElementById('radio-option-template').innerHTML;\n      let optionsBlob = \"\";\n      for (const option in data.controls[control].options) {\n        let icon = document.getElementById(`${data.controls[control].options[option].icon}-icon-template`) ? document.getElementById(`${data.controls[control].options[option].icon}-icon-template`).innerHTML : \"\";\n        let noiconClass = icon === \"\" ? \"no-icon\" : \"\";\n        const optionPath = pathAttr.replace(/\\\"value\\\"/, '\"options\"').replace(/<value>/, `{\"${option}\":{\"value\":<value>}}`);\n        optionsBlob += optionTemplate\n          .replace(/{{path}}/g, optionPath)\n          .replace(/{{name}}/g, data.controls[control].options[option].name)\n          .replace(/{{icon}}/g, icon)\n          .replace(/{{no-icon}}/g, noiconClass)\n          .replace(/{{control_set}}/g, controlSetName)\n          .replace(/{{option}}/g, option)\n          .replace(/{{value}}/g, data.controls[control].options[option].value);\n      }\n\n      htmlBlob = radioContainerTemplate.replace(/{{options}}/, optionsBlob);\n    }\n    if (type === \"pan_tilt\") {\n      htmlBlob = document.getElementById('pan-tilt-template').innerHTML\n        .replace(/{{name}}/g, data.controls[control].name)\n        .replace(/{{path}}/g, pathAttr);\n    }\n    if (type === \"camera_zoom\") {\n      htmlBlob = document.getElementById('camera-zoom-template').innerHTML\n        .replace(/{{name}}/g, data.controls[control].name)\n        .replace(/{{path}}/g, pathAttr);\n    }\n    if (type === \"modal_launcher\") {\n      icon = document.getElementById(`${data.controls[control].icon}-icon-template`) ? document.getElementById(`${data.controls[control].icon}-icon-template`).innerHTML : \"\";\n      noiconClass = icon === \"\" ? \"no-icon\" : \"\";\n\n      htmlBlob = document.getElementById('modal-launcher-button-template').innerHTML\n        .replace(/{{icon}}/g, icon)\n        .replace(/{{no-icon}}/g, noiconClass)\n        .replace(/{{name}}/g, data.controls[control].name)\n        .replace(/{{modal}}/g, data.controls[control].modal);\n    }\n\n    // inject button into control set \n    controlSet.querySelector('.controls-wrapper').insertAdjacentHTML('beforeend', htmlBlob);\n  }\n}\n\n// system healing: make sure all stateful buttons reflect current orchestrator state\nfunction updateAllControls(statusData) {\n  let controls = document.querySelectorAll('.control');\n\n  controls.forEach((control) => {\n    let type, value, parentObject;\n    // skip modal_launcher buttons\n    if ( !control.getAttribute('data-modal') ) {\n      const path = control.getAttribute('data-path');\n      const pathAsObj = JSON.parse(path.replace(/<value>/, '\"\"'));\n      ({ value, parentObject } = (0,_utilities_js__WEBPACK_IMPORTED_MODULE_2__.followPath)(pathAsObj, statusData));\n      type = parentObject.type ;\n    }\n    else {\n      type = 'modal_launcher' ;\n    }\n\n    /* set up button based on type */\n    if (type || value.value?.type) {\n      /* stateless controls (just need handlers attached) */\n      // stateless_mute\n      if (type === 'stateless_mute') {\n        control.addEventListener('click', _controls_default_button_js__WEBPACK_IMPORTED_MODULE_4__.handleDefaultButton);\n        control.addEventListener('touchstart', _controls_default_button_js__WEBPACK_IMPORTED_MODULE_4__.handleDefaultButton);\n      }\n      // stateless_volume\n      if (type === 'stateless_volume') {\n        control.querySelectorAll('button').forEach((btn) => {\n          btn.addEventListener('click', _controls_default_button_js__WEBPACK_IMPORTED_MODULE_4__.handleDefaultButton);\n          btn.addEventListener('touchstart', _controls_default_button_js__WEBPACK_IMPORTED_MODULE_4__.handleDefaultButton);\n        });\n      }\n      // pan_tilt and camera_zoom (ptz)\n      if (type === 'pan_tilt' || type === 'camera_zoom') {\n        control.querySelectorAll('button').forEach((btn) => {\n          btn.addEventListener('mousedown', _controls_camera_pan_tilt_zoom_js__WEBPACK_IMPORTED_MODULE_3__.handlePanTiltZoom);\n          btn.addEventListener('touchstart', _controls_camera_pan_tilt_zoom_js__WEBPACK_IMPORTED_MODULE_3__.handlePanTiltZoom);\n\n          btn.addEventListener('mouseup', _controls_camera_pan_tilt_zoom_js__WEBPACK_IMPORTED_MODULE_3__.handlePanTiltZoomStop);\n          btn.addEventListener('touchend', _controls_camera_pan_tilt_zoom_js__WEBPACK_IMPORTED_MODULE_3__.handlePanTiltZoomStop);\n        });\n      }\n      // modal_launcher\n      if (type === 'modal_launcher') {\n        control.addEventListener('click', _modals_js__WEBPACK_IMPORTED_MODULE_0__.openModal);\n        control.addEventListener('touchstart', _modals_js__WEBPACK_IMPORTED_MODULE_0__.openModal);\n      }\n\n      /* stateful controls */\n      // generic_toggle\n      if (type === 'generic_toggle') {\n        (0,_controls_toggle_button_js__WEBPACK_IMPORTED_MODULE_9__.setButtonState)(control, value, _controls_toggle_button_js__WEBPACK_IMPORTED_MODULE_9__.handleToggleButton);\n      }\n      // mute\n      if (type === 'mute') {\n        (0,_controls_mute_button_js__WEBPACK_IMPORTED_MODULE_6__.setMuteButtonState)(control, value);\n      }\n      // volume\n      if (type === 'volume') {\n        // if linked mute has not already been evaluated/set, make sure slider still knows its mute state\n        if (control.getAttribute('data-channel')\n          && document.querySelector(`.mute[data-channel=${control.getAttribute('data-channel')}]`).getAttribute('data-value') === \"true\") {\n          control.setAttribute('data-muted', true);\n        }\n        (0,_controls_volume_slider_js__WEBPACK_IMPORTED_MODULE_11__.setVolumeSliderState)(control, value);\n      }\n      // power \n      if (type === 'power') {\n        (0,_controls_power_button_js__WEBPACK_IMPORTED_MODULE_7__.setPowerState)(control, value);\n      }\n      // video mute\n      if (type === 'video_mute') {\n        (0,_controls_video_mute_button_js__WEBPACK_IMPORTED_MODULE_10__.setVideoMuteButtonState)(control, value);\n      }\n      // radio types: radio (generic), display_source_radio (previously input_select), camera_preset_radio\n      if (type === \"radio\" || type === \"camera_preset_radio\" || type === \"display_source_radio\" || type === \"input_select\") {\n        control.querySelectorAll('.radio-option').forEach((option) => {\n          const optionID = option.getAttribute('data-option');\n          const optionState = value[optionID].value;\n          if (type === \"display_source_radio\" || type === \"input_select\") {\n            (0,_controls_display_source_radio_js__WEBPACK_IMPORTED_MODULE_5__.setDisplaySourceOptionState)(option, optionState);\n          } else {\n            (0,_controls_toggle_button_js__WEBPACK_IMPORTED_MODULE_9__.setButtonState)(option, optionState, _controls_radio_js__WEBPACK_IMPORTED_MODULE_8__.handleRadioSelect);\n          }\n        });\n      }\n    }\n  });\n}\n\nasync function updateStatus(payload, callback) {\n  // Delay incoming update until current update has finished\n  if (updateStatusOngoing) {\n    setTimeout(updateStatus(payload, callback), 500);\n    return null;\n  } else {\n    updateStatusOngoing = true;\n  }\n\n  // Pause refresh loop\n  window.clearTimeout(refresh);\n\n  // Send the update to the orchestrator\n  const response = await fetch(`${orchestrator}/api/systems/${system}/state`, {\n    method: 'PUT',\n    body: payload\n  })\n    .then(response => response.json())\n    .catch(error => {\n      console.error('Error:', error);\n    });\n\n  // Call the callback function if one is provided\n  if (callback) {\n    callback(response);\n  }\n\n  // Reset refresh loop\n  refresh = window.setTimeout(getStatus, 5000);\n\n  // Allow other updates to go through\n  updateStatusOngoing = false;\n\n  return response;\n}\n\nasync function getStatus() {\n  window.clearTimeout(refresh); // pause refresh loop\n\n  let redraw = document.getElementById(\"main-controls\").innerHTML ? false : true;\n\n  const status = await fetch(`${orchestrator}/api/systems/${system}/state`)\n    .then(response => {\n      if (response.status !== 200) {\n        clearDisplay();\n        redraw = true;\n        let message;\n        switch (response.status) {\n          case 204:\n            message = \"<p>System initializing ...</p>\";\n            break;\n          case 404:\n            message = \"<p>Could not find system</p>\";\n            break;\n          case 500:\n            message = \"<p>Internal Server Error</p>\";\n            break;\n          default:\n            message = \"<p>System status unknown</p>\";\n        }\n\n        document.getElementById(\"message\").innerHTML = message;\n        document.getElementById(\"message\").classList.remove(\"hidden\");\n\n        return false\n      }\n\n      // 200 response:\n      retries = 2 ;\n      return response.json()\n    })\n    .catch(err => {\n      document.getElementById(\"message\").innerHTML = `<p>Unable to reach orchestrator ${orchestrator}</p>` ;\n      document.getElementById(\"message\").classList.remove(\"hidden\") ;\n      retries-- ;\n\n      return false\n    })\n\n  // reset refresh loop, except in case of fetch failure\n  if ( retries > -1 ) {\n    refresh = window.setTimeout(getStatus, 5000);\n  }\n  else {\n    document.getElementById(\"message\").innerHTML += '<p>Refresh your browser to try again.</p>' ;\n  }\n  \n  // re/draw the gui\n  if (status) {\n    document.getElementById(\"message\").classList.add(\"hidden\");\n\n    // header\n    document.getElementById(\"room-name\").innerHTML = status.system_name;\n    document.getElementById(\"room-header\").classList.remove(\"hidden\");\n\n    // maintenance modal data\n    document.getElementById( \"maintenance\" ).querySelector( \"pre\" ).innerHTML = JSON.stringify(status, null, 4) ;\n\t\tdocument.getElementById( \"maintenance\" ).querySelector( \".timestamp\" ).innerHTML = new Date() ;\n\n    // main controls\n    if (redraw && status.control_sets) {\n      for (const controlSet in status.control_sets) {\n        let path = `{\"control_sets\":{\"${controlSet}\":{\"controls\":{\"<id>\":{\"value\":<value>}}}}}`;\n\n        // check for options\n        let options = { 'half_width': false, 'justify_content': false }; // defaults\n        if (status.control_sets[controlSet].display_options) {\n          for (let opt in status.control_sets[controlSet].display_options) {\n            options[opt] = status.control_sets[controlSet].display_options[opt];\n          }\n        }\n\n        setupControlSet(controlSet, status.control_sets[controlSet], path, 'main-controls');\n      }\n    }\n\n    // advanced controls \n    if ( redraw && status.modals )  {\n      (0,_modals_js__WEBPACK_IMPORTED_MODULE_0__.setupModals)(status.modals, false);\n    }\n\n    // update controls to the current state\n    updateAllControls(status);\n  }\n}\n\n\n// clear cache and reload\nfunction clearSystemCache() {\n  document.getElementById('tech-errors').innerHTML = '';\n\n  const options = {\n    method: 'delete'\n  };\n  fetch(`${orchestrator}/api/systems/${system}/cache`, options)\n    .then(response => {\n      if ( response.ok ) {\n        getStatus();\n      } else {\n        const alert = document.getElementById('alert-template').innerHTML.replace(/{{message}}/, `ERROR: ${response.status} response from ${orchestrator}/api/systems/${system}/cache`) ;\n        document.getElementById('tech-errors').insertAdjacentHTML('beforeend', alert) ;      }\n    })\n}\n\n\n/* page load listener */\nwindow.addEventListener(\"load\", async (event) => {\n  // set the 'orchestrator' and 'system' variables\n  // check if the system and orchestrator are passed in the URL\n  const queryParams = new URLSearchParams(window.location.search);\n  if (queryParams.has('system')) {\n    system = queryParams.get('system');\n  }\n  if (queryParams.has('orchestrator')) {\n    orchestrator = queryParams.get('orchestrator');\n  }\n\n  // If orchestrator is not defined in URL param, fetch from /config\n  if (!orchestrator) {\n    orchestrator = await fetch(\"/config\")\n\t    .then(response => response.json())\n      .then(json => json.orchestrator)\n      .catch(err => {\n        console.error(\"Could not get 'orchestrator' from server\", err);\n        return null\n      })\n  }\n\n  // If either orchestrator or system is not set, show error message\n  if (!orchestrator || !system) {\n    document.getElementById(\"message\").innerHTML = \"<p>System configuration not found.</p> <p>Make sure 'system' and 'orchestrator' URL parameters are set.</p>\";\n    document.getElementById(\"message\").classList.remove(\"hidden\");\n  }\n\n  // start getStatus loop\n  if (orchestrator && system) {\n    getStatus();\n  }\n\n  // preventDefault on all form submit actions \n  document.querySelectorAll(\"form\").forEach(function (form) {\n    form.addEventListener(\"submit\", function (e) {\n      e.preventDefault();\n    });\n  });\n\n  // modal dismiss listeners\n  document.querySelectorAll(\".modal:not(.timeout-exempt) .dismiss\").forEach(function (dismiss) {\n    dismiss.addEventListener(\"click\", _modals_js__WEBPACK_IMPORTED_MODULE_0__.closeModal);\n  });\n\n  // maintenance modal\n  document.getElementById('room-name').addEventListener('click', _maintenance_modal_js__WEBPACK_IMPORTED_MODULE_1__.handleMaintenanceClick);\n  document.getElementById('maintenance').addEventListener('click', _maintenance_modal_js__WEBPACK_IMPORTED_MODULE_1__.resetMaintenanceModalTimeout);\n  document.getElementById('config-reload-btn').addEventListener('click', clearSystemCache);\n  document.querySelector('#maintenance .dismiss').addEventListener('click', ()=> {\n    document.getElementById('maintenance').classList.add('hidden');\n    document.getElementById('tech-errors').innerHTML = '';\n  });\n});\n\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/main.js?");

/***/ }),

/***/ "./source/js/maintenance_modal.js":
/*!****************************************!*\
  !*** ./source/js/maintenance_modal.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleMaintenanceClick: () => (/* binding */ handleMaintenanceClick),\n/* harmony export */   resetMaintenanceModalTimeout: () => (/* binding */ resetMaintenanceModalTimeout)\n/* harmony export */ });\n/***\n * \n *  \n * Maintenance (Tech Info) Modal\n *    \n *                                                    \n */\nlet clickCounter = 0;\nlet maintenanceClickTimeoutId; // time between clicks\nlet maintenanceModalTimeoutId; // modal auto-close \n\nfunction resetMaintenanceModalTimeout() {\n  clearTimeout(maintenanceModalTimeoutId);\n\n  // close the maintenance modal after 5 minutes\n  maintenanceModalTimeoutId = setTimeout(() => {\n    document.getElementById('maintenance').classList.add('hidden') ;\n  }, 300000) ; \n}\n\nfunction handleMaintenanceClick(e) {\n  if ( clickCounter < 4 ) { // being extra paranoid, capping this number\n    clickCounter++ \n  }; \n\n  if ( clickCounter === 3 ) {\n    document.getElementById('maintenance').classList.remove('hidden') ;\n    resetMaintenanceModalTimeout();\n  }\n\n  // clear clickCounter after 1 second idle\n  clearTimeout(maintenanceClickTimeoutId);\n  maintenanceClickTimeoutId = setTimeout(() => {\n    clickCounter = 0;\n  }, 1000) ;\n}\n\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/maintenance_modal.js?");

/***/ }),

/***/ "./source/js/modals.js":
/*!*****************************!*\
  !*** ./source/js/modals.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeModal: () => (/* binding */ closeModal),\n/* harmony export */   openModal: () => (/* binding */ openModal),\n/* harmony export */   setupModals: () => (/* binding */ setupModals),\n/* harmony export */   timeoutModals: () => (/* binding */ timeoutModals)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.js */ \"./source/js/main.js\");\n/***\n * \n *  \n * Modals\n *    \n *                                                    \n */\n\n\nconst modalTimeoutDurationDefault = 5; // 5 minutes \nlet modalTimeoutDuration = modalTimeoutDurationDefault ;\nlet modalTimeoutId;\n\nfunction openModal(e = null, modalId = null) {\n  const linkedModalId = e ? e.target.getAttribute('data-modal') : modalId;\n  const linkedModal = document.getElementById(linkedModalId);\n  linkedModal.classList.remove('hidden');\n  modalTimeoutDuration = parseFloat(linkedModal.getAttribute('data-timeout')) * 60000;\n  timeoutModals();\n}\n\nfunction closeModal(e) {\n  clearTimeout(modalTimeoutId);\n  const parentmodal = e.target.getAttribute(\"data-dismiss\");\n  document.getElementById(parentmodal).classList.add(\"hidden\");\n}\n\n// duration should be minutes\nfunction timeoutModals() {\n  clearTimeout(modalTimeoutId);\n\n  modalTimeoutId = setTimeout(function () {\n    document.querySelectorAll('.modal:not(.timeout-exempt)').forEach((modal) => {\n      modal.classList.add('hidden');\n    });\n  }, modalTimeoutDuration );\n}\n\nfunction setupModals(modals) {\n  for (const modal in modals) {\n    // if the modal has already been created, exit\n    if (!document.getElementById(modal)) {\n      // render new modals\n      // timeoutDuration is in minutes\n      const timeoutDuration = modals[modal].timeout_timer ? modals[modal].timeout_timer : modalTimeoutDurationDefault;\n      let html_blob = document.getElementById('advanced-modal-template').innerHTML\n        .replace(/{{modalId}}/g, modal)\n        .replace(/{{title}}/g, modals[modal].name)\n        .replace(/{{timeoutDuration}}/g, timeoutDuration);\n\n      document.getElementById('advanced-modals-container').insertAdjacentHTML('beforeend', html_blob);\n\n      // inject control sets into modal\n      for (const controlSet in modals[modal].control_sets) {\n        const path = `{\"modals\":{\"${modal}\":{\"control_sets\":{\"${controlSet}\":{\"controls\":{\"<id>\":{\"value\":<value>}}}}}}}`;\n\n        // check for options\n        let options = { 'half_width': false, 'justify_content': false }; // defaults\n        if (modals[modal].control_sets[controlSet].display_options) {\n          for (let opt in modals[modal].control_sets[controlSet].display_options) {\n            options[opt] = modals[modal].control_sets[controlSet].display_options[opt];\n          }\n        }\n\n        (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.setupControlSet)(controlSet, modals[modal].control_sets[controlSet], path, `${modal}-content`, options);\n      }\n    }\n  }\n\n  // attach listener to Back buttons (note: clean this up in advanced_controls)\n  document.querySelectorAll('.exit-modal').forEach((btn) => {\n    btn.addEventListener('click', closeModal);\n    btn.addEventListener('touchstart', closeModal);\n  });\n\n  // attach listeners to reset timeout on any touch inside modal\n  document.querySelectorAll('.modal:not(.timeout-exempt)').forEach((modal) => {\n    modal.addEventListener('click', timeoutModals);\n    modal.addEventListener('touchstart', timeoutModals);\n  });\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/modals.js?");

/***/ }),

/***/ "./source/js/utilities.js":
/*!********************************!*\
  !*** ./source/js/utilities.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   countdown: () => (/* binding */ countdown),\n/* harmony export */   countdownTimeoutId: () => (/* binding */ countdownTimeoutId),\n/* harmony export */   followPath: () => (/* binding */ followPath),\n/* harmony export */   mergeJSON: () => (/* binding */ mergeJSON),\n/* harmony export */   useProgressBar: () => (/* binding */ useProgressBar)\n/* harmony export */ });\n/***\n * \n *  \n * Utilities\n *    \n *                                                    \n */\nlet countdownTimeoutId;\n\nfunction mergeJSON(obj1, obj2) {\n  let attributes = Object.keys(obj2);\n\n  for (let i = 0; i < attributes.length; i++) {\n    if (!obj1.hasOwnProperty(attributes[i])) {\n      obj1[attributes[i]] = obj2[attributes[i]];\n    }\n    else {\n      if (typeof (obj1[attributes[i]]) === \"object\") {\n        obj1[attributes[i]] = mergeJSON(obj1[attributes[i]], obj2[attributes[i]]);\n      }\n    }\n  }\n  return obj1;\n}\n\n// crawl the orchestrator state data to find the end value of a control path\nfunction followPath(path, obj) { // ie. path, response\n  const pathKey = Object.keys(path)[0];\n\n  if (obj.hasOwnProperty(pathKey)) {\n    // then look for the next path key in response ...\n    if (typeof path[pathKey] === \"object\") {\n      return followPath(path[pathKey], obj[pathKey]);\n    }\n    else {\n      return { \"value\": obj[pathKey], \"parentObject\": obj };\n    }\n  }\n  else {\n    console.log(`obj does not match the path: ${path}`);\n    return false;\n  }\n}\n\nfunction countdown(counterDiv) {\n  // get the current number\n  var curr = parseInt(counterDiv.innerHTML);\n\n  // reset it to current -1\n  counterDiv.innerHTML = (curr - 1);\n\n  countdownTimeoutId = setTimeout(function () {\n    if (curr > 1) {\n      countdown(counterDiv, countdownTimeoutId);\n    }\n    else {\n      clearTimeout(countdownTimeoutId);\n    }\n  }, 1000);\n}\n\n// useProgressBar gets called in both handleTogglePower and handleDisplaySourceSelect\n// progress -- reference to the DOM element to affect;\n// powerState -- boolean (true if powering up);\n// duration -- int, representing *seconds*;\nfunction useProgressBar(progress, duration, progressClass = 'warming', callback) {\n  progress.classList.add(progressClass);\n  progress.setAttribute('style', `--duration:${duration}s;`);\n  progress.classList.remove('hidden');\n\n  setTimeout(function () {\n    // hide this progress bar\n    progress.classList.add('hidden');\n    progress.classList.remove('warming');\n    progress.classList.remove('cooling');\n\n    callback(); // reattach event listeners\n  }, (duration * 1000));\n}\n\n// Export functions\n\n\n//# sourceURL=webpack://openav_frontend/./source/js/utilities.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./source/js/main.js");
/******/ 	
/******/ })()
;